# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        # Base case: if either p or q is None
        if not p or not q:
            # Trees are the same if both are None, otherwise they are different
            return p == q
        
        # Check if the current nodes have the same value and
        # recursively check their left and right subtrees
        return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
    
"""
Explanation

1. Base Case Check for Null Nodes

   if not p or not q:
       return p == q
   
   - This checks if either `p` or `q` is `None`.
   - If both `p` and `q` are `None`, the function returns `True` because two `None` nodes are considered the same.
   - If only one of `p` or `q` is `None`, the function returns `False` because one tree has more nodes than the other.

2. Check Current Node Values and Recurse
   
   return p.val == q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
   
   - The function first checks if the values of the current nodes (`p.val` and `q.val`) are equal.
   - If the values are equal, the function then recursively checks the left children (`p.left` and `q.left`) and the right children (`p.right` and `q.right`) of the current nodes.
   - The `and` operator ensures that all three conditions (current node values, left subtrees, and right subtrees) must be true for the trees to be considered the same.
"""
